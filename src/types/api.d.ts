/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health
         * @description Health check endpoint
         */
        get: operations["health_v1_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/db-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Db Test
         * @description Test database connection endpoint
         */
        get: operations["db_test_v1_db_test_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register */
        post: operations["register_v1_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/guest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Guest */
        get: operations["guest_v1_auth_guest_get"];
        put?: never;
        /** Guest */
        post: operations["guest_v1_auth_guest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_v1_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh */
        post: operations["refresh_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Memory */
        post: operations["create_memory_v1_memory_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Memory */
        delete: operations["delete_memory_v1_memory_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Memory */
        post: operations["update_memory_v1_memory_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Memories */
        get: operations["get_memories_v1_memory_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Memory Categories */
        get: operations["get_memory_categories_v1_memory_categories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/category/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Memory By Category */
        get: operations["get_memory_by_category_v1_memory_category_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/memory/categories/number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Memory Categories With Number */
        get: operations["get_memory_categories_with_number_v1_memory_categories_number_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grammar/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Grammar */
        post: operations["create_grammar_v1_grammar_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grammar/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Grammar */
        delete: operations["delete_grammar_v1_grammar_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grammar/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Grammar */
        post: operations["update_grammar_v1_grammar_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grammar/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Grammars */
        get: operations["get_grammars_v1_grammar_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mistake/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Mistake */
        post: operations["create_mistake_v1_mistake_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mistake/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Mistake */
        delete: operations["delete_mistake_v1_mistake_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mistake/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Mistake */
        post: operations["update_mistake_v1_mistake_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mistake/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Mistakes */
        get: operations["get_mistakes_v1_mistake_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/mistake/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recent Mistakes */
        get: operations["get_recent_mistakes_v1_mistake_recent_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/story/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Story */
        post: operations["create_story_v1_story_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/story/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Story */
        delete: operations["delete_story_v1_story_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/story/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Story */
        post: operations["update_story_v1_story_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/story/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Stories */
        get: operations["get_stories_v1_story_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/story/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Story Categories */
        get: operations["get_story_categories_v1_story_categories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/story/category/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Story By Category */
        get: operations["get_story_by_category_v1_story_category_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vocab/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Vocab */
        post: operations["create_vocab_v1_vocab_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vocab/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Vocab */
        delete: operations["delete_vocab_v1_vocab_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vocab/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Vocab */
        post: operations["update_vocab_v1_vocab_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vocab/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vocabs */
        get: operations["get_vocabs_v1_vocab_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User */
        get: operations["get_current_user_v1_user_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/question/agent/chat/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make Question By Chat Stream
         * @description 即时流式返回 Agent 进度与结果 (SSE)。
         */
        post: operations["make_question_by_chat_stream_v1_question_agent_chat_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/question/agent/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Make Question By Chat */
        post: operations["make_question_by_chat_v1_question_agent_chat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/question/judge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Judge Question */
        post: operations["judge_question_v1_question_judge_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AgentMessageData */
        AgentMessageData: {
            /** Emoji */
            emoji: string;
            /** Message */
            message: string;
        };
        /** AgentMessageEvent */
        AgentMessageEvent: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message";
            data: components["schemas"]["AgentMessageData"];
        };
        /**
         * AssemblyQuestion
         * @description Assembly question (fill in the blanks).
         */
        AssemblyQuestion: {
            /**
             * @description discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            question_type: "assembly";
            /** Stem */
            stem: string;
            /** Options */
            options: string[];
            /** Correct Answer */
            correct_answer: string[];
            /** Answer */
            answer?: string[] | null;
        };
        /**
         * ChoiceQuestion
         * @description Multiple-choice question (single correct answer).
         */
        ChoiceQuestion: {
            /**
             * @description discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            question_type: "choice";
            /** Stem */
            stem: string;
            /** Options */
            options: string[];
            /** Correct Answer */
            correct_answer: string;
            /** Answer */
            answer?: string | null;
        };
        /**
         * GrammarCreateSchema
         * @description The Grammar create schema by Pydantic.
         */
        GrammarCreateSchema: {
            /**
             * Name
             * @description The name of the grammar.
             */
            name: string;
            /**
             * Usage
             * @description The usage of the grammar.
             */
            usage: string;
            /**
             * Status
             * @description The status of the grammar.
             */
            status: number;
            /**
             * Language
             * @description The language of the grammar.
             */
            language: string;
        };
        /**
         * GrammarSchema
         * @description The Grammar schema by Pydantic.
         */
        GrammarSchema: {
            /**
             * Name
             * @description The name of the grammar.
             */
            name: string;
            /**
             * Usage
             * @description The usage of the grammar.
             */
            usage: string;
            /**
             * Status
             * @description The status of the grammar.
             */
            status: number;
            /**
             * Language
             * @description The language of the grammar.
             */
            language: string;
            /**
             * Id
             * @description The ID of the grammar.
             */
            id?: number | null;
            /**
             * Created At
             * Format: date-time
             * @description The created time of the grammar.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The updated time of the grammar.
             */
            updated_at: string;
        };
        /**
         * GrammarUpdateSchema
         * @description The Grammar update schema by Pydantic.
         */
        GrammarUpdateSchema: {
            /**
             * Id
             * @description The ID of the grammar.
             */
            id: number;
            /**
             * Name
             * @description The name of the grammar.
             */
            name?: string | null;
            /**
             * Usage
             * @description The usage of the grammar.
             */
            usage?: string | null;
            /**
             * Status
             * @description The status of the grammar.
             */
            status?: number | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * JudgeResult
         * @description Standardized evaluation output for a question answer.
         */
        JudgeResult: {
            /** Correct */
            correct: boolean;
            /** Question */
            question: string;
            /** Answer */
            answer: string;
            /** Correct Answer */
            correct_answer?: string;
            /** Error Reason */
            error_reason?: string;
        };
        /** LoginSchema */
        LoginSchema: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /**
         * MatchQuestion
         * @description Match question (match language to language, and match the correct answer).
         */
        MatchQuestion: {
            /**
             * @description discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            question_type: "match";
            /** Left Options */
            left_options: string[];
            /** Right Options */
            right_options: string[];
            /** Correct Answer */
            correct_answer: [
                string,
                string
            ][];
            /** Answer */
            answer?: [
                string,
                string
            ][] | null;
        };
        /**
         * MemoryCreateSchema
         * @description The Memory create schema by Pydantic.
         */
        MemoryCreateSchema: {
            /**
             * Content
             * @description The content of the memory.
             */
            content: string;
            /**
             * Category
             * @description The category of the memory.
             */
            category: string;
            /**
             * Priority
             * @description The priority of the memory.
             */
            priority: number;
            /**
             * Language
             * @description The language of the memory.
             */
            language: string;
        };
        /**
         * MemorySchema
         * @description The Memory schema by Pydantic.
         */
        MemorySchema: {
            /**
             * Content
             * @description The content of the memory.
             */
            content: string;
            /**
             * Category
             * @description The category of the memory.
             */
            category: string;
            /**
             * Priority
             * @description The priority of the memory.
             */
            priority: number;
            /**
             * Language
             * @description The language of the memory.
             */
            language: string;
            /**
             * Id
             * @description The ID of the memory.
             */
            id?: number;
            /**
             * Created At
             * Format: date-time
             * @description The created time of the memory.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The updated time of the memory.
             */
            updated_at: string;
        };
        /** MemoryUpdateSchema */
        MemoryUpdateSchema: {
            /**
             * Id
             * @description The ID of the memory.
             */
            id: number;
            /**
             * Content
             * @description The content of the memory.
             */
            content: string;
            /**
             * Priority
             * @description The priority of the memory.
             */
            priority: number;
        };
        /**
         * MistakeCreateSchema
         * @description The Mistake create schema by Pydantic.
         */
        MistakeCreateSchema: {
            /**
             * Question
             * @description The question of the mistake.
             */
            question: string;
            /**
             * Question Type
             * @description The type of the question.
             */
            question_type: string;
            /**
             * Language
             * @description The language type of the question.
             */
            language: string;
            /**
             * Answer
             * @description The answer of the mistake.
             */
            answer: string;
            /**
             * Correct Answer
             * @description The correct answer of the mistake.
             */
            correct_answer: string;
            /**
             * Error Reason
             * @description The reason of the mistake.
             */
            error_reason: string;
        };
        /**
         * MistakeSchema
         * @description The Mistake schema by Pydantic.
         */
        MistakeSchema: {
            /**
             * Question
             * @description The question of the mistake.
             */
            question: string;
            /**
             * Question Type
             * @description The type of the question.
             */
            question_type: string;
            /**
             * Language
             * @description The language type of the question.
             */
            language: string;
            /**
             * Answer
             * @description The answer of the mistake.
             */
            answer: string;
            /**
             * Correct Answer
             * @description The correct answer of the mistake.
             */
            correct_answer: string;
            /**
             * Error Reason
             * @description The reason of the mistake.
             */
            error_reason: string;
            /**
             * Id
             * @description The ID of the mistake.
             */
            id?: number | null;
            /**
             * Created At
             * Format: date-time
             * @description The created time of the mistake.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The updated time of the mistake.
             */
            updated_at: string;
        };
        /** QuestionAgentEvent */
        QuestionAgentEvent: components["schemas"]["AgentMessageEvent"] | components["schemas"]["QuestionAgentResult"];
        /** QuestionAgentResult */
        QuestionAgentResult: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "result";
            /** Data */
            data: (components["schemas"]["ChoiceQuestion"] | components["schemas"]["MatchQuestion"] | components["schemas"]["AssemblyQuestion"])[];
        };
        /** RefreshResponseSchema */
        RefreshResponseSchema: {
            /** Access Token */
            access_token: string;
        };
        /** RefreshSchema */
        RefreshSchema: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** RegisterResponseSchema */
        RegisterResponseSchema: {
            /** Id */
            id: number;
            /** Email */
            email: string;
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
        };
        /** RegisterSchema */
        RegisterSchema: {
            /** Name */
            name: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /**
         * StoryCreateSchema
         * @description The Story create schema by Pydantic.
         */
        StoryCreateSchema: {
            /**
             * Content
             * @description The content of the story.
             */
            content: string;
            /**
             * Summary
             * @description The summary of the story.
             */
            summary: string;
            /**
             * Category
             * @description The category of the story.
             */
            category: string;
            /**
             * Language
             * @description The language of the story.
             */
            language: string;
        };
        /**
         * StorySchema
         * @description The Story schema by Pydantic.
         */
        StorySchema: {
            /**
             * Content
             * @description The content of the story.
             */
            content: string;
            /**
             * Summary
             * @description The summary of the story.
             */
            summary: string;
            /**
             * Category
             * @description The category of the story.
             */
            category: string;
            /**
             * Language
             * @description The language of the story.
             */
            language: string;
            /**
             * Id
             * @description The ID of the story.
             */
            id?: number | null;
            /**
             * Created At
             * Format: date-time
             * @description The created time of the story.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The updated time of the story.
             */
            updated_at: string;
        };
        /** TokenSchema */
        TokenSchema: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
        };
        /**
         * UserSchema
         * @description The User schema by Pydantic.
         *
         *     ユーザースキーマ。
         */
        UserSchema: {
            /**
             * Id
             * @description The ID of the user.
             */
            id?: number;
            /**
             * Name
             * @description The name of the user.
             */
            name: string;
            /**
             * Email
             * @description The email of the user.
             */
            email: string;
            /**
             * Token Quota
             * @description The token quota of the user.
             */
            token_quota: number;
            /**
             * Created At
             * Format: date-time
             * @description The created time of the user.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The updated time of the user.
             */
            updated_at: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VocabCreateSchema
         * @description The Vocab create schema by Pydantic.
         */
        VocabCreateSchema: {
            /**
             * Name
             * @description The name of the vocab.
             */
            name: string;
            /**
             * Usage
             * @description The usage of the vocab.
             */
            usage: string;
            /**
             * Status
             * @description The status of the vocab.
             */
            status: number;
            /**
             * Language
             * @description The language of the vocab.
             */
            language: string;
        };
        /**
         * VocabSchema
         * @description The Vocab schema by Pydantic.
         */
        VocabSchema: {
            /**
             * Name
             * @description The name of the vocab.
             */
            name: string;
            /**
             * Usage
             * @description The usage of the vocab.
             */
            usage: string;
            /**
             * Status
             * @description The status of the vocab.
             */
            status: number;
            /**
             * Language
             * @description The language of the vocab.
             */
            language: string;
            /**
             * Id
             * @description The ID of the vocab.
             */
            id?: number | null;
            /**
             * Created At
             * Format: date-time
             * @description The created time of the vocab.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description The updated time of the vocab.
             */
            updated_at: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_v1_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    db_test_v1_db_test_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    register_v1_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponseSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    guest_v1_auth_guest_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenSchema"];
                };
            };
        };
    };
    guest_v1_auth_guest_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenSchema"];
                };
            };
        };
    };
    login_v1_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_v1_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshResponseSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_memory_v1_memory_create_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemoryCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_memory_v1_memory_delete_delete: {
        parameters: {
            query: {
                memory_id: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_memory_v1_memory_update_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemoryUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_memories_v1_memory_page_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_memory_categories_v1_memory_categories_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_memory_by_category_v1_memory_category_page_get: {
        parameters: {
            query: {
                category: string;
                limit?: number;
                offset?: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemorySchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_memory_categories_with_number_v1_memory_categories_number_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_grammar_v1_grammar_create_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GrammarCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrammarSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_grammar_v1_grammar_delete_delete: {
        parameters: {
            query: {
                grammar_id: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrammarSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_grammar_v1_grammar_update_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GrammarUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrammarSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_grammars_v1_grammar_page_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrammarSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mistake_v1_mistake_create_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MistakeCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MistakeSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_mistake_v1_mistake_delete_delete: {
        parameters: {
            query: {
                mistake_id: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MistakeSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_mistake_v1_mistake_update_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MistakeSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MistakeSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mistakes_v1_mistake_page_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MistakeSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recent_mistakes_v1_mistake_recent_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MistakeSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_story_v1_story_create_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoryCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_story_v1_story_delete_delete: {
        parameters: {
            query: {
                story_id: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_story_v1_story_update_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorySchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorySchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_stories_v1_story_page_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                only_target_language?: boolean;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorySchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_story_categories_v1_story_categories_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_story_by_category_v1_story_category_page_get: {
        parameters: {
            query: {
                category: string;
                limit?: number;
                offset?: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorySchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_vocab_v1_vocab_create_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VocabCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VocabSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_vocab_v1_vocab_delete_delete: {
        parameters: {
            query: {
                vocab_id: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VocabSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vocab_v1_vocab_update_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VocabSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VocabSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vocabs_v1_vocab_page_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VocabSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_v1_user_me_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    make_question_by_chat_stream_v1_question_agent_chat_stream_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description SSE stream; each 'data:' line is one JSON QuestionAgentEvent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionAgentEvent"];
                    "text/event-stream": components["schemas"]["QuestionAgentEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    make_question_by_chat_v1_question_agent_chat_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["ChoiceQuestion"] | components["schemas"]["MatchQuestion"] | components["schemas"]["AssemblyQuestion"])[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    judge_question_v1_question_judge_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
                "Accept-Language"?: string | null;
                "Target-Language"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChoiceQuestion"] | components["schemas"]["MatchQuestion"] | components["schemas"]["AssemblyQuestion"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JudgeResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
